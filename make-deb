#!/usr/bin/env python3

import platform
import subprocess
import os
import os.path
import shutil
import json
from datetime import datetime
from email.utils import format_datetime


def build():
    subprocess.run(['cargo', 'build', '--release'], check=True)
    subprocess.run(['strip', 'target/release/password-storage'], check=True)


def detect_arch():
    machine = platform.machine()
    if machine == 'x86_64':
        return 'amd64'
    elif machine in ['i386', 'i686']:
        return 'i386'
    else:
        raise Exception('Unknown machine architecture \'' + machine + '\'.')


def detect_version():
    metadata = subprocess.run(['cargo', 'metadata', '--no-deps', '--format-version', '1'], check=True, stdout=subprocess.PIPE).stdout
    metadata = json.loads(metadata)
    return metadata['packages'][0]['version']


def get_build_date():
    return format_datetime(datetime.utcnow())


def make_desktop_file():
    return """[Desktop Entry]
Version=1.0
Name=PasswordStorage
GenericName=PasswordStorage
Comment=Secure storage for passwords
Exec=password-storage %f
Icon=password-storage
Terminal=false
Type=Application
Categories=Utility;
StartupNotify=true
MimeType=application/x-revelation;"""


def dir_size(directory):
    output = subprocess.run(['du', '-ks', directory], check=True, stdout=subprocess.PIPE).stdout
    return int(output.split()[0])


def make_control_file(version, arch, size):
    return """Package: password-storage
Version: {version}
Maintainer: Andrey Kutejko <andy128k@gmail.com>
Architecture: {arch}
Section: misc
Priority: optional
Description: Password manager
 PasswordStorage manages passwords/secrets and stores them securely.
Depends: libc6, libgtk-3-0 (>= 3.22), shared-mime-info
Conflicts: revelation
Installed-size: {size}
""".format(version=version, arch=arch, size=size)


def make_changelog_file(version, date):
    return """pass-storage ({version}) stable; urgency=medium

  * dummy.

 -- Andrey Kutejko <andy128k@gmail.com>  {date}
""".format(version=version, date=date)


REVELATION_XML = """<?xml version="1.0"?>
<mime-info xmlns='http://www.freedesktop.org/standards/shared-mime-info'>
	<mime-type type="application/x-revelation">
		<comment>Revelation password database</comment>
		<magic>
			<match type="string" offset="0" value="rvl\\0">
				<match type="string" offset="5" value="\\0">
					<match type="string" offset="9" value="\\0\\0\\0" />
				</match>
			</match>
		</magic>
	</mime-type>
</mime-info>
"""


def put_content(prefix, version, arch, date):
    bin_dir = os.path.join(prefix, 'usr', 'bin')
    os.makedirs(bin_dir, exist_ok=True)
    shutil.copy('target/release/password-storage', bin_dir)

    pixmaps_dir = os.path.join(prefix, 'usr', 'share', 'pixmaps')
    os.makedirs(pixmaps_dir, exist_ok=True)
    shutil.copy('icons/app-icon/password-storage.svg', pixmaps_dir)

    applications_dir = os.path.join(prefix, 'usr', 'share', 'applications')
    os.makedirs(applications_dir, exist_ok=True)
    with open(os.path.join(applications_dir, 'password-storage.desktop'), 'w') as f:
        f.write(make_desktop_file())

    doc_dir = os.path.join(prefix, 'usr', 'share', 'doc', 'password-storage')
    os.makedirs(doc_dir, exist_ok=True)
    changelog = os.path.join(doc_dir, 'changelog')
    with open(changelog, 'w') as f:
        f.write(make_changelog_file(version, date))
    subprocess.run(['gzip', '-9', '-n', changelog], check=True)

    shutil.copy('COPYRIGHT', os.path.join(doc_dir, 'copyright'))

    # revelation file mime type

    mime_dir = os.path.join(prefix, 'usr', 'share', 'mime', 'packages')
    os.makedirs(mime_dir, exist_ok=True)
    with open(os.path.join(mime_dir, 'revelation.xml'), 'w') as f:
        f.write(REVELATION_XML)

    mime_icon_dir = os.path.join(prefix, 'usr', 'share', 'icons', 'hicolor', 'scalable', 'mimetypes')
    os.makedirs(mime_icon_dir, exist_ok=True)
    shutil.copy('icons/mimetypes/application-x-revelation.svg', mime_icon_dir)


def put_dpkg_control(prefix, version, arch, size, date):
    deb_dir = os.path.join(prefix, 'DEBIAN')
    os.makedirs(deb_dir, exist_ok=True)
    with open(os.path.join(deb_dir, 'control'), 'w') as f:
        f.write(make_control_file(version, arch, size))

def make_dpkg(prefix):
    subprocess.run(['fakeroot', 'dpkg-deb', '-Zxz', '-z9', '--build', prefix, '.'], check=True)


if __name__ == '__main__':
    build()

    arch = detect_arch()
    version = detect_version()
    date = get_build_date()

    prefix = './deb'
    shutil.rmtree(prefix, ignore_errors=True)

    put_content(prefix, version, arch, date)
    size = dir_size(prefix)
    put_dpkg_control(prefix, version, arch, size, date)
    make_dpkg(prefix)

    shutil.rmtree(prefix)
